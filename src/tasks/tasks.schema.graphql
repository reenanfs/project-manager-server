scalar DateTime

type Task {
  id: ID!
  taskName: String!
  description: String
  user: User
  startDate: DateTime
  dueDate: DateTime
  completionDate: DateTime
  completed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type BulkOperationResult {
  count: Int!
}

enum SortOrder {
  asc
  desc
}

input GetTasksOrderBy {
  dueDate: SortOrder
  updatedAt: SortOrder
}

input GetTasksInput {
  orderBy: GetTasksOrderBy
}

input CreateTaskInput {
  taskName: String!
  description: String
  userId: ID!
  startDate: DateTime
  dueDate: DateTime
  completed: Boolean!
}

input UpdateTaskInput {
  id: ID!
  taskName: String
  description: String
  userId: ID
  startDate: DateTime
  dueDate: DateTime
  completionDate: DateTime
  completed: Boolean
}

input DeleteTasksInput {
  ids: [String!]!
}

input TaskWhereUniqueInput {
  id: ID!
}

type Query {
  tasks(input: GetTasksInput): [Task]
  task(input: TaskWhereUniqueInput!): Task
}

type Mutation {
  createTask(input: CreateTaskInput!): Task
  updateTask(input: UpdateTaskInput!): Task
  deleteTask(input: TaskWhereUniqueInput!): Task
  deleteTasks(input: DeleteTasksInput): BulkOperationResult
}
