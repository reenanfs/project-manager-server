type User {
  id: ID!
  name: String!
  photoUrl: String
  isAdmin: Boolean!
  tasks: [Task]
  projects: [Project]
  projectMemberships: [ProjectMembership]
  credential: Credential
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GetUsersOrderBy {
  updatedAt: SortOrder
}

input GetUsersInput {
  orderBy: GetUsersOrderBy
}

input CreateUserInput {
  name: String!
  photoUrl: String
  isAdmin: Boolean!
  credentialId: ID
}

input UpdateUserInput {
  id: ID!
  name: String
  photoUrl: String
  isAdmin: Boolean
  credentialId: ID
}

input UserWhereUniqueInput {
  id: ID!
}

type Query {
  users(input: GetUsersInput): [User]
  user(input: UserWhereUniqueInput!): User
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: UserWhereUniqueInput!): User
  deleteUsers(input: DeleteMultipleItemsInput): BulkOperationResult
}
