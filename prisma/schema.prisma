// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Credential {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  refreshToken String?  @map("refresh_token")
  userId       String   @unique @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("credentials")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  photoUrl           String?             @map("photo_url")
  isAdmin            Boolean             @map("is_admin")
  currentProjectId   String?             @map("current_project_id")
  currentProject     Project?            @relation(name: "UserCurrentProject", fields: [currentProjectId], references: [id])
  credential         Credential?
  tasks              Task[]
  projectsOwned      Project[]           @relation("ProjectOwner")
  projectMemberships ProjectMembership[]
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  @@map("users")
}

model Task {
  id             String    @id @default(uuid())
  name           String    @map("task_name")
  description    String?
  startDate      DateTime? @map("start_date")
  dueDate        DateTime? @map("due_date")
  completionDate DateTime? @map("completion_date")
  completed      Boolean
  userId         String?   @map("user_id")
  user           User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  projectId      String    @map("project_id")
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("tasks")
}

model Project {
  id                  String              @id @default(uuid())
  name                String
  description         String?
  ownerId             String              @map("owner_id")
  owner               User                @relation("ProjectOwner", fields: [ownerId], references: [id])
  usersCurrentProject User[]              @relation(name: "UserCurrentProject")
  projectMemberships  ProjectMembership[]
  tasks               Task[]
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")

  @@map("projects")
}

model Role {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String?
  grantedPermissions GrantedPermission[]
  projectMemberships ProjectMembership[]
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  @@map("roles")
}

model Permission {
  id                 String              @id @default(uuid())
  name               String              @unique
  description        String?
  grantedPermissions GrantedPermission[]
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  @@map("permissions")
}

model GrantedPermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String     @map("role_id")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String     @map("permission_id")

  @@id([roleId, permissionId])
  @@unique([roleId, permissionId])
  @@map("granted_permissions")
}

model ProjectMembership {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String   @map("project_id")
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, projectId])
  @@unique([userId, projectId])
  @@map("project_memberships")
}
